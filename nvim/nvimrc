"-----------------------------------------------------------------------------
" Plugins
"-----------------------------------------------------------------------------

packadd minpac
call minpac#init()

call minpac#add('junegunn/fzf')
call minpac#add('junegunn/fzf.vim')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('w0rp/ale')
call minpac#add('mhinz/vim-grepper')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('sgur/vim-editorconfig')
call minpac#add('vim-airline/vim-airline')
call minpac#add('scrooloose/nerdtree')
call minpac#add('justinmk/vim-sneak')
call minpac#add('pechorin/any-jump.vim')
call minpac#add('prettier/vim-prettier')
call minpac#add('neoclide/coc.nvim', {'branch': 'release'})
call minpac#add('Olical/conjure', {'tag': 'v4.23.0'})
call minpac#add('preservim/vimux')
call minpac#add('jpalardy/vim-slime')
call minpac#add('stephpy/vim-php-cs-fixer')
call minpac#add('metakirby5/codi.vim')
" Colours
call minpac#add('kristijanhusak/vim-hybrid-material')
call minpac#add('rafi/awesome-vim-colorschemes')
call minpac#add('vim-airline/vim-airline-themes')
" Syntax
call minpac#add('pangloss/vim-javascript')
call minpac#add('MaxMEllon/vim-jsx-pretty')
call minpac#add('leshill/vim-json')
call minpac#add('tpope/vim-sexp-mappings-for-regular-people')
call minpac#add('guns/vim-sexp')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-surround')
call minpac#add('jwalton512/vim-blade')
call minpac#add('luochen1990/rainbow')
call minpac#add('elixir-editors/vim-elixir')

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

"-----------------------------------------------------------------------------
" Core settings
"-----------------------------------------------------------------------------

" Enable syntax highlighting
syntax on

" Indentation settings
filetype plugin indent on

" Files, backups and undo
set nobackup
set nowritebackup
set nowb
set noswapfile

" Make undo persist between sessions
set undofile

" Set undo temp file directory
set undofile
if !has('nvim')
  set undodir=~/dotfiles/nvim/undo
endif
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

set colorcolumn=80

" Make the 'cw' and like commands put a $ at the end instead of just deleting
" the text and replacing it
set cpoptions=ces$

let mapleader = "\<Space>"
let maplocalleader="\-"

" Get interactive feedback when using substitute
set inccommand=nosplit

" Disable folding
set nofoldenable

" Enable mouse for scrolling context menu
set mouse=a

set history=200

"-----------------------------------------------------------------------------
" Theme
"-----------------------------------------------------------------------------

" Color scheme
set background=dark
colorscheme onehalfdark
let g:rainbow_conf = {
\	'guifgs': ['LightGreen', 'Orange', 'SkyBlue', 'LightMagenta']
\}

" colorscheme carbonized-light
" let g:rainbow_conf = {
" \	'guifgs': ['Lime', 'Coral', 'DodgerBlue', 'Magenta']
" \}

set termguicolors

" Highlight terminal cursor
if has('nvim')
  highlight! link TermCursor Cursor
  highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
endif

" Line numbers
set number

let g:airline_theme='onehalfdark'
let g:rainbow_active = 1
nnoremap <leader>br :RainbowToggle<cr>

"-----------------------------------------------------------------------------
" Search
"-----------------------------------------------------------------------------

" Case insensitive search - \C overrides
set ignorecase
set smartcase

" Grepper
let g:grepper = {}
let g:grepper.tools = ['grep', 'git', 'rg', 'ag']
map <leader>a :GrepperAg 

" Search for the current word
nnoremap <leader>* :Grepper -cword -noprompt<cr>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" Expand grep to GrepperGrep in command-line mode
function! SetupCommandAlias(input, output)
  exec 'cabbrev <expr> '.a:input
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:input.'")'
        \ .'? ("'.a:output.'") : ("'.a:input.'"))'
endfunction
call SetupCommandAlias("grep", "GrepperGrep")

" Open Grepper-prompt for a particular Grep-alike tool
nnoremap <leader>g :Grepper -tool git<cr>
nnoremap <leader>G :Grepper -tool rg<cr>

" FZF
nnoremap <leader>, :Tags<cr>
nnoremap <leader>. :Buffers<cr>
nnoremap <leader>; :Marks<cr>
nnoremap <leader>t :GFiles<cr>

"-----------------------------------------------------------------------------
" Linter
"-----------------------------------------------------------------------------

let g:ale_completion_enabled = 1
let g:ale_linters = {
      \	'js': ['eslint'],
      \	'javascript': ['eslint'],
      \	'jsx': ['eslint'],
      \	'scss': ['scsslint'],
      \ }

" Highlight JSX syntax in .js files
let g:jsx_ext_required = 0
let b:ale_fixers = ['eslint']

" Prevent long files breaking syntax highlighting
set redrawtime=10000

" Prettier
nmap <leader>m <Plug>(Prettier)

" vim-jsx-pretty colorful config
let g:vim_jsx_pretty_colorful_config = 1 " default 0

"-----------------------------------------------------------------------------
" Movement
"-----------------------------------------------------------------------------

" Moving around, tabs, windows and buffers
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

nnoremap <leader>n :NERDTreeToggle<cr>
let g:NERDTreeWinPos = "right"
let g:NERDTreeShowHidden = 1

" Easy access to start of line
nmap & ^
nmap # $

" Sneak
let g:sneak#label = 1
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

"-----------------------------------------------------------------------------
" Window management
"-----------------------------------------------------------------------------

" Improve window switching
nnoremap <C-h> <c-w>h
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l
if has('nvim')
  tnoremap <C-h> <c-\><c-n><c-w>h
  tnoremap <C-j> <c-\><c-n><c-w>j
  tnoremap <C-k> <c-\><c-n><c-w>k
  tnoremap <C-l> <c-\><c-n><c-w>l
endif

" Window / split sizing
nnoremap <S-Up> <C-w>+
nnoremap <S-Down> <C-w>-
nnoremap <S-Right> <C-w>>
nnoremap <S-Left> <C-w><
nnoremap <leader>z :only<cr>

" Close window
nnoremap <leader>c :q<cr>
nnoremap <leader>l :ccl<cr>

"-----------------------------------------------------------------------------
" Autocomplete
"-----------------------------------------------------------------------------

" TextEdit might fail if hidden is not set
set hidden

" More space for displaying messages
set cmdheight=2

" Reduce from default 400. UX improvement
set updatetime=300

" Don't pass messages to |ins-completion-menu|
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use L to show documentation in preview window
nnoremap <silent> L :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"-----------------------------------------------------------------------------
" Useful shortcuts
"-----------------------------------------------------------------------------

" Switch buffer
nmap <leader>u :b#<cr>

" Git status
map <leader>g :Gstatus<cr>

" Save
nnoremap <leader>s :w<cr>

" Disable highlight
map <silent> <leader><cr> :noh<cr>

" Edit vimrc
nmap <leader>bv :e ~/.nvimrc<cr>
nmap <leader>dv :source ~/.nvimrc<cr>
nmap <leader>ll :e storage/logs/laravel.log<cr>
nmap <leader>bs :e ~/dotfiles/nvim/vsp.md<cr>
nmap <leader>bt :e ~/dotfiles/nvim/tip.md<cr>
nmap <leader>bn :e ~/.tmux.conf<cr>

" Fix syntax color breaking
nmap <leader>h :syntax sync fromstart<cr>

" Exit help files
autocmd Filetype help nmap <buffer> q :q<cr>

nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>

" Conjure settings
set splitright
nmap <leader>ou ^"a<localleader>ee
nmap <leader>oh A ;<esc>a <esc>"cp
nmap <leader>ol f;Dx^
nmap <leader>ofj ^cse(acljs.pprint/pprint <esc><leader>ou<esc>u
nmap <leader>ofc ^cse(aclojure.pprint/pprint <esc><leader>ou<esc>u

" PHP cs
let g:php_cs_fixer_config_file = '.php_cs'
nmap <leader>or:call PhpCsFixerFixDirectory()<CR>
nmap <leader>ot :call PhpCsFixerFixFile()<CR>

" Vimux
function! VimuxSlime()
call VimuxRunCommand(@v)
endfunction

" If text is selected, save it in the v buffer and send that buffer it to tmux
vmap <leader>vs "vy :call VimuxSlime()<CR>

" Select current paragraph and send it to tmux
nmap <leader>vs vip<leader>vs<CR>

" Vim slime
let g:slime_target = "neovim"

xmap <leader>r <Plug>SlimeRegionSend
nmap <leader>r <Plug>SlimeParagraphSend
nmap <c-c>v     <Plug>SlimeConfig
tnoremap <Esc> <C-\><C-n>

" Fix redo with repeat.vim
map <nop> <Plug>(RepeatRedo)

" Expand active file directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'
