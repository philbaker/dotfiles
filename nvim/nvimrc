"-----------------------------------------------------------------------------
" Plugins
"-----------------------------------------------------------------------------

packadd minpac
call minpac#init()

call minpac#add('junegunn/fzf')
call minpac#add('junegunn/fzf.vim')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-surround')
call minpac#add('w0rp/ale')
call minpac#add('mhinz/vim-grepper')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('mattn/emmet-vim')
call minpac#add('sgur/vim-editorconfig')
call minpac#add('Shougo/deoplete.nvim')
call minpac#add('vim-airline/vim-airline')
call minpac#add('machakann/vim-highlightedyank')
call minpac#add('scrooloose/nerdtree')
call minpac#add('justinmk/vim-sneak')
call minpac#add('tpope/vim-fireplace')
call minpac#add('guns/vim-clojure-static')
call minpac#add('pechorin/any-jump.vim')
call minpac#add('easymotion/vim-easymotion')
call minpac#add('prettier/vim-prettier')
call minpac#add('jpalardy/vim-slime')
call minpac#add('iamcco/markdown-preview.nvim', {'do': 'packloadall! | call mkdp#util#install()'})
call minpac#add('SirVer/ultisnips')

" Colours
call minpac#add('kristijanhusak/vim-hybrid-material')
call minpac#add('rafi/awesome-vim-colorschemes')
call minpac#add('lilydjwg/colorizer')
call minpac#add('luochen1990/rainbow')

" Syntax
call minpac#add('mustache/vim-mustache-handlebars')
call minpac#add('pangloss/vim-javascript')
call minpac#add('MaxMEllon/vim-jsx-pretty')
call minpac#add('leshill/vim-json')
call minpac#add('guns/vim-sexp')

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

"-----------------------------------------------------------------------------
" Core settings
"-----------------------------------------------------------------------------

" Indentation settings
filetype plugin indent on

" Preserve windows formatting if needed
" set binary
" set noeol

" Files, backups and undo
" Turn backup off
set nobackup
set nowb
set noswapfile

" Make undo persist between sessions
set undofile

" Set undo temp file directory
set undofile
if !has('nvim')
  set undodir=~/dotfiles/nvim/undo
endif
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

set colorcolumn=80

" Make the 'cw' and like commands put a $ at the end instead of just deleting
" the text and replacing it
set cpoptions=ces$

" Autocompletion
let g:deoplete#enable_at_startup = 1

" Map tab to auto complete
inoremap <expr><tab> pumvisible() ? "<c-n>" : "<tab>"

let mapleader = "\<Space>"
let maplocalleader="\\"

" Get interactive feedback when using substitute
set inccommand=nosplit

" Disable folding
set nofoldenable

"-----------------------------------------------------------------------------
" Theme
"-----------------------------------------------------------------------------

" Color scheme
set background=dark
colorscheme hybrid_material
let g:rainbow_conf = {
\	'guifgs': ['LightGreen', 'Orange', 'SkyBlue', 'LightMagenta']
\}

" colorscheme carbonized-light
" let g:rainbow_conf = {
" \	'guifgs': ['Lime', 'Coral', 'DodgerBlue', 'Magenta']
" \}

set termguicolors

" Highlight terminal cursor
if has('nvim')
  highlight! link TermCursor Cursor
  highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
endif

" Line numbers
" Toggle relative line number
function! NumberToggle()
  if(&relativenumber)
    set number
  else
    " Uncomment the following to
    " display a '0' instead of the line number
    " set nonumber
    set relativenumber
    set number
  endif
endfunc
"nnoremap <C-n> :call NumberToggle()<cr>
call NumberToggle()

let g:airline_theme='minimalist'
let g:rainbow_active = 1
nnoremap <leader>r :RainbowToggle<cr>

"-----------------------------------------------------------------------------
" Search
"-----------------------------------------------------------------------------

" Case insensitive search - \C overrides
set ignorecase
set smartcase

" Grepper
let g:grepper = {}
let g:grepper.tools = ['grep', 'git', 'rg', 'ag']
map <leader>a :GrepperAg 

" Search for the current word
nnoremap <leader>* :Grepper -cword -noprompt<cr>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" Expand grep to GrepperGrep in command-line mode
function! SetupCommandAlias(input, output)
  exec 'cabbrev <expr> '.a:input
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:input.'")'
        \ .'? ("'.a:output.'") : ("'.a:input.'"))'
endfunction
call SetupCommandAlias("grep", "GrepperGrep")

" Open Grepper-prompt for a particular Grep-alike tool
nnoremap <leader>g :Grepper -tool git<cr>
nnoremap <leader>G :Grepper -tool rg<cr>

" FZF
nnoremap <leader>, :Tags<cr>
nnoremap <leader>. :Buffers<cr>
nnoremap <leader>; :Marks<cr>

"-----------------------------------------------------------------------------
" Linter
"-----------------------------------------------------------------------------

let g:ale_completion_enabled = 1
let g:ale_linters = {
      \	'js': ['eslint'],
      \	'javascript': ['eslint'],
      \	'jsx': ['eslint'],
      \	'scss': ['scsslint'],
      \ 'ruby': ['rubocop'],
      \ }

" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Highlight JSX syntax in .js files
let g:jsx_ext_required = 0
let b:ale_fixers = ['eslint']

" Prevent long files breaking syntax highlighting
set redrawtime=10000

" Command to fix syntax highlighting if necessary
nnoremap <leader>y :mode<cr>

" Prettier
nmap <leader>m <Plug>(Prettier)

" vim-jsx-pretty colorful config
let g:vim_jsx_pretty_colorful_config = 1 " default 0

"-----------------------------------------------------------------------------
" Movement
"-----------------------------------------------------------------------------

" Moving around, tabs, windows and buffers
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Easymotion
let g:EasyMotion_smartcase = 1
map <leader> <Plug>(easymotion-prefix)
map <leader>e <Plug>(easymotion-overwin-w)

nnoremap <leader>n :NERDTreeToggle<cr>

" Easy access to start of line
nmap & ^
nmap # $

" Sneak
let g:sneak#label = 1
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

"-----------------------------------------------------------------------------
" Window management
"-----------------------------------------------------------------------------

" Improve window switching
nnoremap <C-h> <c-w>h
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l
if has('nvim')
  tnoremap <C-h> <c-\><c-n><c-w>h
  tnoremap <C-j> <c-\><c-n><c-w>j
  tnoremap <C-k> <c-\><c-n><c-w>k
  tnoremap <C-l> <c-\><c-n><c-w>l
endif

" Window / split sizing
nnoremap <S-Up> <C-w>+
nnoremap <S-Down> <C-w>-
nnoremap <S-Right> <C-w>>
nnoremap <S-Left> <C-w><
nnoremap <leader>z :only<cr>

" Change command line height
map <leader>q :set cmdheight=1<cr>
map <leader>' :set cmdheight=3<cr>

" Close window
nnoremap <leader>c :q<cr>
nnoremap <leader>l :ccl<cr>

" Edit another file in same directory as the current file
nmap <leader>v :new <c-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

"-----------------------------------------------------------------------------
" Terminal
"-----------------------------------------------------------------------------

" Terminal shortcut
nnoremap <leader>t :botright Tnew<cr>
let g:neoterm_size = 10

" Terminal mode mappings
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>
endif

" Avoied nested nvim instances
if has('nvim') && executable('nvr')
  let $VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
endif

" Keep terminal buffers alive on switch
set hidden

" Clear screen
tmap <C-l> clear<cr>

"-----------------------------------------------------------------------------
" Ruby
"-----------------------------------------------------------------------------

augroup rubypath
  autocmd!

  autocmd FileType ruby setlocal suffixesadd+=.rb
  autocmd FileType ruby setlocal path+=~/usr/local/bundle/gems
augroup END

"-----------------------------------------------------------------------------
" Useful shortcuts
"-----------------------------------------------------------------------------

" Switch buffer
nmap <leader>u :b#<cr>

" Emmet
let g:user_emmet_leader_key=","

" Git status
map <leader>g :Gstatus<cr>

" Save
nnoremap <leader>s :w<cr>

" Disable highlight
map <silent> <leader><cr> :noh<cr>

" Next and previous in error list
nmap <leader>k :cn<cr><cr>
nmap <leader>p :cp<cr><cr>

" Edit vimrc
nmap <leader>bn :e ~/.nvimrc<cr>
nmap <leader>bz :e ~/.zshrc<cr>
nmap <leader>ba :e ~/.aliases<cr>
nmap <leader>bw :e ~/.work-aliases<cr>
nmap <leader>dn :source ~/.nvimrc<cr>
nmap <leader>dz :source ~/.zshrc<cr>

" Fix syntax color breaking
nmap <leader>h :syntax sync fromstart<cr>

" Exit help files
autocmd Filetype help nmap <buffer> q :q<cr>

" Put repl output
nnoremap <leader>ou :silent Eval<cr>
nnoremap <leader>oh :Last <bar> execute "normal! yG" <bar> q <bar> silent pu <bar> %s\/;=\/;; => \/g<cr>
nnoremap <leader>oc :normal I;; => <cr>

" Use tmux for slime output
let g:slime_target = "tmux"

" UltiSnips
" Trigger configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" Split window
let g:UltiSnipsEditSplit="vertical"
