"-----------------------------------------------------------------------------
" Plugins
"-----------------------------------------------------------------------------

packadd minpac
call minpac#init()

call minpac#add('junegunn/fzf')
call minpac#add('junegunn/fzf.vim')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-surround')
call minpac#add('w0rp/ale')
call minpac#add('mhinz/vim-grepper')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('mattn/emmet-vim')
call minpac#add('sgur/vim-editorconfig')
call minpac#add('vim-airline/vim-airline')
call minpac#add('scrooloose/nerdtree')
call minpac#add('justinmk/vim-sneak')
call minpac#add('pechorin/any-jump.vim')
call minpac#add('prettier/vim-prettier')
call minpac#add('neoclide/coc.nvim', {'branch': 'release'})
call minpac#add('liquidz/vim-iced')
call minpac#add('preservim/vimux')

" Colours
call minpac#add('kristijanhusak/vim-hybrid-material')
call minpac#add('rafi/awesome-vim-colorschemes')

" Syntax
call minpac#add('pangloss/vim-javascript')
call minpac#add('MaxMEllon/vim-jsx-pretty')
call minpac#add('leshill/vim-json')
call minpac#add('guns/vim-sexp')
call minpac#add('tpope/vim-sexp-mappings-for-regular-people')
call minpac#add('jwalton512/vim-blade')
call minpac#add('luochen1990/rainbow')

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

"-----------------------------------------------------------------------------
" Core settings
"-----------------------------------------------------------------------------

" Indentation settings
filetype plugin indent on

" Files, backups and undo
" Turn backup off
set nobackup
set nowritebackup
set nowb
set noswapfile

" Make undo persist between sessions
set undofile

" Set undo temp file directory
set undofile
if !has('nvim')
  set undodir=~/dotfiles/nvim/undo
endif
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

set colorcolumn=80

" Make the 'cw' and like commands put a $ at the end instead of just deleting
" the text and replacing it
set cpoptions=ces$

let mapleader = "\<Space>"
let maplocalleader="\\"

" Get interactive feedback when using substitute
set inccommand=nosplit

" Disable folding
set nofoldenable

" Enable mouse for scrolling context menu
set mouse=a

"-----------------------------------------------------------------------------
" Theme
"-----------------------------------------------------------------------------

" Color scheme
set background=dark
colorscheme hybrid_material
let g:rainbow_conf = {
\	'guifgs': ['LightGreen', 'Orange', 'SkyBlue', 'LightMagenta']
\}

" colorscheme carbonized-light
" let g:rainbow_conf = {
" \	'guifgs': ['Lime', 'Coral', 'DodgerBlue', 'Magenta']
" \}

set termguicolors

" Highlight terminal cursor
if has('nvim')
  highlight! link TermCursor Cursor
  highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
endif

" Line numbers
" Toggle relative line number
function! NumberToggle()
  if(&relativenumber)
    set number
  else
    " Uncomment the following to
    " display a '0' instead of the line number
    " set nonumber
    set relativenumber
    set number
  endif
endfunc
"nnoremap <C-n> :call NumberToggle()<cr>
call NumberToggle()

let g:airline_theme='minimalist'
let g:rainbow_active = 1
nnoremap <leader>r :RainbowToggle<cr>

"-----------------------------------------------------------------------------
" Search
"-----------------------------------------------------------------------------

" Case insensitive search - \C overrides
set ignorecase
set smartcase

" Grepper
let g:grepper = {}
let g:grepper.tools = ['grep', 'git', 'rg', 'ag']
map <leader>a :GrepperAg 

" Search for the current word
nnoremap <leader>* :Grepper -cword -noprompt<cr>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" Expand grep to GrepperGrep in command-line mode
function! SetupCommandAlias(input, output)
  exec 'cabbrev <expr> '.a:input
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:input.'")'
        \ .'? ("'.a:output.'") : ("'.a:input.'"))'
endfunction
call SetupCommandAlias("grep", "GrepperGrep")

" Open Grepper-prompt for a particular Grep-alike tool
nnoremap <leader>g :Grepper -tool git<cr>
nnoremap <leader>G :Grepper -tool rg<cr>

" FZF
nnoremap <leader>, :Tags<cr>
nnoremap <leader>. :Buffers<cr>
nnoremap <leader>; :Marks<cr>
nnoremap <c-p> :GFiles<cr>

"-----------------------------------------------------------------------------
" Linter
"-----------------------------------------------------------------------------

let g:ale_completion_enabled = 1
let g:ale_linters = {
      \	'js': ['eslint'],
      \	'javascript': ['eslint'],
      \	'jsx': ['eslint'],
      \	'scss': ['scsslint'],
      \ 'ruby': ['rubocop'],
      \ }

" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Highlight JSX syntax in .js files
let g:jsx_ext_required = 0
let b:ale_fixers = ['eslint']

" Prevent long files breaking syntax highlighting
set redrawtime=10000

" Prettier
nmap <leader>m <Plug>(Prettier)

" vim-jsx-pretty colorful config
let g:vim_jsx_pretty_colorful_config = 1 " default 0

" html formatting
autocmd FileType html
\ setlocal equalprg=tidy\ -quiet\ -i\ --show-body-only\ true\ -f\ .errorfile


"-----------------------------------------------------------------------------
" Movement
"-----------------------------------------------------------------------------

" Moving around, tabs, windows and buffers
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

nnoremap <leader>n :NERDTreeToggle<cr>

" Easy access to start of line
nmap & ^
nmap # $

" Sneak
let g:sneak#label = 1
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

"-----------------------------------------------------------------------------
" Window management
"-----------------------------------------------------------------------------

" Improve window switching
nnoremap <C-h> <c-w>h
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l
if has('nvim')
  tnoremap <C-h> <c-\><c-n><c-w>h
  tnoremap <C-j> <c-\><c-n><c-w>j
  tnoremap <C-k> <c-\><c-n><c-w>k
  tnoremap <C-l> <c-\><c-n><c-w>l
endif

" Window / split sizing
nnoremap <S-Up> <C-w>+
nnoremap <S-Down> <C-w>-
nnoremap <S-Right> <C-w>>
nnoremap <S-Left> <C-w><
nnoremap <leader>z :only<cr>

" Close window
nnoremap <leader>c :q<cr>
nnoremap <leader>l :ccl<cr>

" Edit another file in same directory as the current file
nmap <leader>v :new <c-r>=escape(expand("%:p:h"), ' ') . '/'<cr>

"-----------------------------------------------------------------------------
" Autocomplete
"-----------------------------------------------------------------------------

" TextEdit might fail if hidden is not set
set hidden

" More space for displaying messages
set cmdheight=2

" Reduce from default 400. UX improvement
set updatetime=300

" Don't pass messages to |ins-completion-menu|
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "<C-g>u<CR><c-r>=coc#on_enter()<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use L to show documentation in preview window
nnoremap <silent> L :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <c-space>rn <Plug>(coc-rename)

" Formatting selected code
xmap <c-space>f  <Plug>(coc-format-selected)
nmap <c-space>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region
" Example: `<leader>aap` for current paragraph
xmap <c-space>a  <Plug>(coc-codeaction-selected)
nmap <c-space>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer
nmap <c-space>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line
nmap <c-space>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <c-space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <c-space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <c-space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <c-space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <c-space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <c-space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <c-space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <c-space>p  :<C-u>CocListResume<CR>

"-----------------------------------------------------------------------------
" Useful shortcuts
"-----------------------------------------------------------------------------

" Switch buffer
nmap <leader>u :b#<cr>

" Emmet
let g:user_emmet_leader_key=","

" Git status
map <leader>g :Gstatus<cr>

" Save
nnoremap <leader>s :w<cr>

" Disable highlight
map <silent> <leader><cr> :noh<cr>

" Next and previous in error list
nmap <leader>k :cn<cr><cr>
nmap <leader>p :cp<cr><cr>

" Edit vimrc
nmap <leader>bv :e ~/.nvimrc<cr>
nmap <leader>bz :e ~/.zshrc<cr>
nmap <leader>bb :e ~/.bashrc<cr>
nmap <leader>ba :e ~/.aliases<cr>
nmap <leader>bn :e ~/dev/notes<cr>
nmap <leader>bo :e ~/dev/notes/vim/useful-commands.md<cr>
nmap <leader>bg :e ~/dev/notes/git/commands.md<cr>
nmap <leader>dv :source ~/.nvimrc<cr>
nmap <leader>dz :source ~/.zshrc<cr>
nmap <leader>db :source ~/.bashrc<cr>

" Fix syntax color breaking
nmap <leader>h :syntax sync fromstart<cr>

" Remap redo
nnoremap <c-l> <c-r>

" Exit help files
autocmd Filetype help nmap <buffer> q :q<cr>

" Format repl output
nnoremap <leader>oc :normal I;; => <cr>

nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>

" Vim iced key mappings
let g:iced_enable_default_key_mappings = v:true

" Vimux
 function! VimuxSlime()
  call VimuxRunCommand(@v)
 endfunction

 " If text is selected, save it in the v buffer and send that buffer it to tmux
 vmap <leader>vs "vy :call VimuxSlime()<CR>

 " Select current paragraph and send it to tmux
 nmap <leader>vs vip<leader>vs<CR>
