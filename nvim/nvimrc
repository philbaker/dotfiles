" Plugins
packadd minpac
call minpac#init()

call minpac#add('junegunn/fzf')
call minpac#add('tpope/vim-projectionist')
call minpac#add('tpope/vim-dispatch')
call minpac#add('radenling/vim-dispatch-neovim')
call minpac#add('w0rp/ale')
call minpac#add('mhinz/vim-grepper')
call minpac#add('janko-m/vim-test')
call minpac#add('tpope/vim-obsession')
call minpac#add('tpope/vim-vinegar')
call minpac#add('tpope/vim-commentary')
call minpac#add('kristijanhusak/vim-hybrid-material')
call minpac#add('Shougo/deoplete.nvim')

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

" Indentation settings
filetype plugin indent on
" On pressing tab, insert 2 spaces
set expandtab
" Show existing tab with 2 spaces width
set tabstop=2
set softtabstop=2
" When indenting with '>', use 2 spaces width
set shiftwidth=2

" Color scheme
set background=dark
colorscheme hybrid_material
set termguicolors

" Vim dispatch
let g:dispatch_compilers={}
let g:dispatch_compilers['npm run lint']='tslint'

" Linting
let g:ale_linters = {
      \	'javascript': ['eslint'],
      \	'jsx': ['eslint'],
      \	'scss': ['scsslint'],
      \ }

" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Grepper
let g:grepper = {}
let g:grepper.tools = ['grep', 'git', 'rg']
map <leader>a :GrepperGrep -r -i --include \*.

" Search for the current word
nnoremap <Leader>* :Grepper -cword -noprompt<CR>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" Expand grep to GrepperGrep in command-line mode
function! SetupCommandAlias(input, output)
  exec 'cabbrev <expr> '.a:input
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:input.'")'
        \ .'? ("'.a:output.'") : ("'.a:input.'"))'
endfunction
call SetupCommandAlias("grep", "GrepperGrep")

" Open Grepper-prompt for a particular Grep-alike tool
nnoremap <Leader>g :Grepper -tool git<CR>
nnoremap <Leader>G :Grepper -tool rg<CR>

" Terminal mode mappings
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>
endif

" Highlight terminal cursor
if has('nvim')
  highlight! link TermCursor Cursor
  highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
endif

" Improve window switching
nnoremap <C-h> <c-w>h
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l
if has('nvim')
  tnoremap <C-h> <c-\><c-n><c-w>h
  tnoremap <C-j> <c-\><c-n><c-w>j
  tnoremap <C-k> <c-\><c-n><c-w>k
  tnoremap <C-l> <c-\><c-n><c-w>l
endif

" Avoied nested nvim instances
if has('nvim') && executable('nvr')
  let $VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
endif

" Make undo persist between sessions
set undofile

" Set undo temp file directory
set undofile
if !has('nvim')
  set undodir=~/dotfiles/nvim/undo
endif
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

" Use deoplete for snippets
let g:deoplete#enable_at_startup=1

" deoplete tab-complete
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Line numbers
" Toggle relative line number
function! NumberToggle()
if(&relativenumber)
set number
else
" Uncomment the following to
" display a '0' instead of the line number
" set nonumber
set relativenumber
set number
endif
endfunc
"nnoremap <C-n> :call NumberToggle()<cr>
call NumberToggle()
