"-----------------------------------------------------------------------------
" Plugins
"-----------------------------------------------------------------------------

packadd minpac
call minpac#init()

call minpac#add('junegunn/fzf')
call minpac#add('tpope/vim-vinegar')
call minpac#add('tpope/vim-commentary')
call minpac#add('tpope/vim-rails')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-surround')
call minpac#add('w0rp/ale')
call minpac#add('mhinz/vim-grepper')
call minpac#add('airblade/vim-gitgutter')
call minpac#add('mattn/emmet-vim')
call minpac#add('ludovicchabant/vim-gutentags')
call minpac#add('sgur/vim-editorconfig')
call minpac#add('Shougo/deoplete.nvim')

" Colours
call minpac#add('kristijanhusak/vim-hybrid-material')
call minpac#add('rafi/awesome-vim-colorschemes')
call minpac#add('lilydjwg/colorizer')

" Syntax
call minpac#add('mustache/vim-mustache-handlebars')
call minpac#add('posva/vim-vue')
call minpac#add('pangloss/vim-javascript')
call minpac#add('mxw/vim-jsx')
call minpac#add('leshill/vim-json')

command! PackUpdate call minpac#update()
command! PackClean call minpac#clean()

"-----------------------------------------------------------------------------
" Core settings
"-----------------------------------------------------------------------------

" Indentation settings
filetype plugin indent on

" Files, backups and undo
" Turn backup off
set nobackup
set nowb
set noswapfile

" Make undo persist between sessions
set undofile

" Set undo temp file directory
set undofile
if !has('nvim')
  set undodir=~/dotfiles/nvim/undo
endif
augroup vimrc
  autocmd BufWritePre /tmp/* setlocal noundofile
augroup END

set colorcolumn=80

" Make the 'cw' and like commands put a $ at the end instead of just deleting
" the text and replacing it
set cpoptions=ces$

" Autocompletion
let g:deoplete#enable_at_startup = 1

" Map tab to auto complete
inoremap <expr><tab> pumvisible() ? "<c-n>" : "<tab>"

"-----------------------------------------------------------------------------
" Theme
"-----------------------------------------------------------------------------

" Color scheme
set background=dark
colorscheme hybrid_material
set termguicolors

" Highlight terminal cursor
if has('nvim')
  highlight! link TermCursor Cursor
  highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
endif

" Line numbers
" Toggle relative line number
function! NumberToggle()
  if(&relativenumber)
    set number
  else
    " Uncomment the following to
    " display a '0' instead of the line number
    " set nonumber
    set relativenumber
    set number
  endif
endfunc
"nnoremap <C-n> :call NumberToggle()<cr>
call NumberToggle()

"-----------------------------------------------------------------------------
" Search
"-----------------------------------------------------------------------------

" Grepper
let g:grepper = {}
let g:grepper.tools = ['grep', 'git', 'rg', 'ag']
map <leader>a :GrepperAg 

" Search for the current word
nnoremap <Leader>* :Grepper -cword -noprompt<CR>

" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" Expand grep to GrepperGrep in command-line mode
function! SetupCommandAlias(input, output)
  exec 'cabbrev <expr> '.a:input
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:input.'")'
        \ .'? ("'.a:output.'") : ("'.a:input.'"))'
endfunction
call SetupCommandAlias("grep", "GrepperGrep")

" Open Grepper-prompt for a particular Grep-alike tool
nnoremap <Leader>g :Grepper -tool git<CR>
nnoremap <Leader>G :Grepper -tool rg<CR>

"-----------------------------------------------------------------------------
" Linter
"-----------------------------------------------------------------------------
let g:ale_completion_enabled = 1
let g:ale_linters = {
      \	'javascript': ['eslint'],
      \	'jsx': ['eslint'],
      \	'scss': ['scsslint'],
      \ 'ruby': ['rubocop'],
      \ }

" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Highlight JSX syntax in .js files
let g:jsx_ext_required = 0

"-----------------------------------------------------------------------------
" Movement
"-----------------------------------------------------------------------------

" Moving around, tabs, windows and buffers
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Improve window switching
nnoremap <C-h> <c-w>h
nnoremap <C-j> <c-w>j
nnoremap <C-k> <c-w>k
nnoremap <C-l> <c-w>l
if has('nvim')
  tnoremap <C-h> <c-\><c-n><c-w>h
  tnoremap <C-j> <c-\><c-n><c-w>j
  tnoremap <C-k> <c-\><c-n><c-w>k
  tnoremap <C-l> <c-\><c-n><c-w>l
endif

" Save shortcut
nnoremap <leader>; :update<cr>

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Window / split sizing
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> ] :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> & :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> [ :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

"-----------------------------------------------------------------------------
" Terminal
"-----------------------------------------------------------------------------

" Terminal shortcut
nnoremap <Leader>. :terminal<CR>

" Terminal mode mappings
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-v><Esc> <Esc>
endif

" Avoied nested nvim instances
if has('nvim') && executable('nvr')
  let $VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
endif

" Keep terminal buffers alive on switch
set hidden

"-----------------------------------------------------------------------------
" Useful shortcuts
"-----------------------------------------------------------------------------

" Switch buffer
nmap <leader>u :b#<CR>

" Go to next result in quick fix list
map <leader>n :cn<CR>

" Go to previous result in quick fix list
map <leader>p :cp<CR>

" Emmet
let g:user_emmet_leader_key=","

" Git status
map <leader>g :Gstatus<CR>

" Run rspec for current file
nnoremap <leader>r :Rails<cr>

" Split resize
nnoremap <leader>+ <C-w>+ 
nnoremap <leader>] <C-w>- 

" Change command line height
map <leader>e :set cmdheight=1<CR>
map <leader>o :set cmdheight=3<CR>
