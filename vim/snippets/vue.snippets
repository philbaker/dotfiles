snippet vactions
    actions: {
        updateValue({commit}, payload) {
            commit(updateValue, payload);
        }
    }

snippet vanim-el
    <transition 
        @before-enter="beforeEnter"
        @enter="enter"
        @after-enter="afterEnter"
        @enter-cancelled="enterCancelled"
        @before-Leave="beforeLeave"
        @leave="leave"
        @after-leave="afterLeave"
        @leave-cancelled="leaveCancelled"
        :css="false">
     </transition>

snippet vanim-met
    methods: {
        beforeEnter(el) {
            console.log('beforeEnter');
            }, 
        enter(el, done) {
            console.log('enter');
            done();
        },
        afterEnter(el) {
            console.log('afterEnter');
        }, 
        enterCancelled(el, done) {
            console.log('enterCancelled');
        },
        beforeLeave(el) {
            console.log('beforeLeave');
        }, 
        leave(el, done) {
            console.log('leave');
            done();
        },
        afterLeave(el) {
            console.log('afterLeave');
        }, 
        leaveCancelled(el, done) {
            console.log('leaveCancelled');
        }
    }

snippet vclick
    @click=""

snippet vdata
    data: function () {
        return {
            key: value
        };
    }

snippet vfilter
    filters: {
        fnName: function (v) {
            return;
        }
    }

snippet vfor
    <div v-for="item in items" :key="item.id">
        {{ item }}
    </div>

snippet vgetters
    getters: {
        value: state => {
            return state.value;
        }
    }

snippet vimport-component
    import New from './components/New.vue';

    export default {
        components: {
            appNew: New
    }

snippet vimport
    import New from './components/New.vue';

snippet vkeep
    <keep-alive>
        <component :is="">
            <p>default</p>
        </component>
    </keep-alive>

snippet vmixin
    // define a mixin object
        var myMixin = {
            created: function () {
                this.hello()
            },
            methods: {
                hello: function () {
                    console.log('hello from mixin!')
                }
            }
        }
    // define a component that uses this mixin
    var Component = Vue.extend({
        mixins: [myMixin]
    })
    var component = new Component() // -> "hello from mixin!"

snippet vmutations
    mutations: {
        updateValue: (state, payload) => {
            state.value = payload;
        }
    }

snippet vprops-default
    propName: {
        type: Number,
        default: 100
    },

snippet vprop
    propName: {
        type: Number
    },

snippet vstore
    import Vue from 'vue';
    import Vuex from 'vuex';

    Vue.use(Vuex);

    export const store = new Vuex.Store({
        state: {
            key: value
        }
    });

snippet vue-base
    <template>
        <div>

        </div>
    </template>

    <script>
        export default {
        }
    </script>

    <style scoped>

    </style>
